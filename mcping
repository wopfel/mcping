#!/usr/bin/perl

use strict;
use warnings;

use Curses;
use Time::HiRes qw( usleep );
use Net::Ping;

sub assert( $ ) {
    my $condition = shift;
    return if $condition;
    my ( $pkg, $file, $line ) = caller( 0 );
    die "Assertion failed! Line: $line.";
}

# Which hosts should be pinged?
my @hostlist = qw / 127.0.0.1 127.0.0.2 127.0.0.3 8.8.8.8 127.0.0.4 172.16.0.1 /;

# Initialize the screen
initscr;
my $win = new Curses;

# Initialize ping environment (method, timeout)
my $ping = Net::Ping->new( "icmp", 0.4 );
$ping->hires();

# Screen settings
my $first_line_y = 5;
# For iterating the host list
my $host_nr;
# The history for each host
my @host_history;
$host_history[$_] = "" for (0 .. scalar @hostlist);
# Duration history for each host
my @duration_history;
$duration_history[$_] = () for (0 .. scalar @hostlist);

$win->addstr( 2, 0, "Hit Ctrl+C to exit anytime." );

$win->addstr( $first_line_y - 1,  0, "Host address" );
$win->addstr( $first_line_y - 1, 15, "Current [ms]" );
$win->addstr( $first_line_y - 1, 30, "History graph" );
$win->addstr( $first_line_y - 1, 55, "Success" );
$win->addstr( $first_line_y - 1, 65, "Avg [ms]" );

# Print host names / IP addresses
$host_nr = 0;
foreach my $host ( @hostlist ) {
    $win->addstr( $first_line_y + $host_nr, 0, $host );
    $host_nr++;
}
$win->refresh;

my $loop_nr = 0;

# Endless loop
while (1) {

    # Strip history for each host
    # No screen update here / defer update after next ping check
    $host_nr = 0;
    foreach my $host ( @hostlist ) {
        $host_history[ $host_nr ] = substr $host_history[ $host_nr ], -20;
        $win->addstr( $first_line_y + $host_nr, 30, $host_history[ $host_nr ] );
        $host_nr++;
    }

    # Ping each host
    $host_nr = 0;
    foreach my $host ( @hostlist ) {

        # Ping this host
        my ( $ret, $dur, $ip ) = $ping->ping( $host );

        # Record history and limit size
        push @{ $duration_history[ $host_nr ] }, ( $ret ? $dur : undef );
        shift @{ $duration_history[ $host_nr ] }  while  ( scalar( @{ $duration_history[ $host_nr ] } ) > 20 );

        # Demo purpose
        #$ret = rand() > 0.1;
    
        # History diagram
        $host_history[ $host_nr ] .= $ret ? "." : "-";

        # Calculate average duration
        my $avg_duration = 0;
        my $avg_duration_count = 0;
        for my $i ( @{ $duration_history[ $host_nr ] } ) {
            # Skip undefined values (resulting from a missed ping)
            next unless $i;
            $avg_duration += $i;
            $avg_duration_count++;
        }
        $avg_duration /= $avg_duration_count  if  $avg_duration_count > 0;
        my $avg_duration_s = sprintf( "%9.4f", $avg_duration * 1000 );
        $avg_duration_s = " " x 9  if  $avg_duration == 0;

        # Calculate success rate
        my $successful_pings = 0;
        my $ping_count = length( $host_history[ $host_nr ] );
        for my $i ( 1 .. $ping_count ) {
            my $char = substr( $host_history[ $host_nr ], $i - 1, 1 );
            $successful_pings++ if $char eq ".";
        }
        my $successrate_s;
        # At this point, a previous ping has occurred so the count should be greater than 0
        assert ( $ping_count > 0 );
        $successrate_s = sprintf( "%5.1f%%", $successful_pings / $ping_count * 100 );

        # Screen updates
        my $dur_s = "";
        if ( $ret ) {
            # The duration, printed in milliseconds
            $dur_s = sprintf( "%9.4f", $dur * 1000 );
        } else {
            # Wipe the (previously shown) timeout-duration if ping was unsuccessful
            $dur_s = " " x 9;
        }
        $win->addstr( $first_line_y + $host_nr, 15, $dur_s );
        $win->addstr( $first_line_y + $host_nr, 30, $host_history[ $host_nr ] );
        $win->addstr( $first_line_y + $host_nr, 55, $successrate_s );
        $win->addstr( $first_line_y + $host_nr, 65, $avg_duration_s );

        # Show screen updates
        $win->refresh;

        # Short sleep before the next try
        usleep( 100_000 );

        $host_nr++;

    }

    $loop_nr++;

}

# Terminate curses
endwin;

